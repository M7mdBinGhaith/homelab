server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /etc/promtail/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Traditional system logs
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          host: ${HOSTNAME}
          __path__: /var/log/*log

  # Docker logs with service discovery
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    
    relabel_configs:
      # Extract container name without leading slash
      - source_labels: ['__meta_docker_container_name']
        regex: '/?(.+)'
        target_label: 'container_name'
      
      # Extract compose service name if using docker-compose
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'docker_service'
      
      # If compose service not available, use container name as service
      - source_labels: ['docker_service', 'container_name']
        regex: ';(.+)'
        target_label: 'docker_service'
      
      # Get the container ID
      - source_labels: ['__meta_docker_container_id']
        target_label: 'container_id'
      
      # Get the container image
      - source_labels: ['__meta_docker_container_label_org_opencontainers_image_title', '__meta_docker_container_image']
        regex: ';(.+)'
        target_label: 'image'
      
      # Set the log stream path
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'stream'
      
      # Set the actual file path for reading
      - source_labels: ['__meta_docker_container_id']
        target_label: '__path__'
        replacement: '/var/lib/docker/containers/${1}/*.log'

    pipeline_stages:
      # Parse the log as JSON
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      
      # Set the timestamp
      - timestamp:
          source: time
          format: RFC3339Nano
      
      # Extract any additional metadata from logs
      - regex:
          expression: '(?P<level>(DEBUG|INFO|WARN|ERROR|FATAL|TRACE))'
          source: log
      
      # Apply the level as a label if found
      - labels:
          level: